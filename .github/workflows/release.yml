name: 🚀 Release and Build Docker Images

on:
  # Automatic trigger on tag push
  push:
    tags:
      - 'v*'
  
  # Manual trigger via GitHub UI with advanced options
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Type of release'
        required: true
        type: choice
        options:
          - 'patch'
          - 'minor'
          - 'major'
          - 'prerelease'
          - 'custom'
        default: 'patch'
      custom_version:
        description: 'Custom version (only if release_type=custom, e.g., 1.2.3 or 1.2.3-rc.1)'
        required: false
        type: string
      skip_tests:
        description: 'Skip build tests (not recommended for production)'
        required: false
        type: boolean
        default: false
      create_tag:
        description: 'Create and push Git tag'
        required: false
        type: boolean
        default: true
      generate_changelog:
        description: 'Generate automatic changelog'
        required: false
        type: boolean
        default: true

env:
  # Registry configuration - modify these for your fork
  REGISTRY_DOCKERHUB: docker.io
  REGISTRY_GHCR: ghcr.io
  
  # Image configuration - CHANGE THIS when forking
  IMAGE_NAME: ${{ vars.IMAGE_NAME || 'asychin/amneziawg-docker' }}
  
  # Build configuration
  BUILD_PLATFORMS: linux/amd64,linux/arm64

# Permissions required for this workflow
permissions:
  contents: write
  packages: write

jobs:
  # ============================================================================
  # VERSION CALCULATION AND METADATA PREPARATION
  # ============================================================================
  version-calculate:
    name: 🔢 Calculate Version
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
      current_version: ${{ steps.version.outputs.current_version }}
      changelog: ${{ steps.changelog.outputs.changelog }}
      should_create_tag: ${{ steps.version.outputs.should_create_tag }}
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 🔢 Calculate new version
        id: version
        run: |
          set -e
          
          # Helper functions
          validate_version() {
            local version="$1"
            if [[ ! "$version" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+(\.[a-zA-Z0-9]+)*)?$ ]]; then
              echo "❌ Invalid version format: $version. Use semantic versioning (e.g., 1.0.0, 1.0.0-beta)"
              exit 1
            fi
          }
          
          increment_version() {
            local version="$1"
            local type="$2"
            
            # Remove v prefix if present
            version="${version#v}"
            
            # Parse version components
            local major minor patch prerelease
            if [[ "$version" =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)(-.*)?$ ]]; then
              major="${BASH_REMATCH[1]}"
              minor="${BASH_REMATCH[2]}"
              patch="${BASH_REMATCH[3]}"
              prerelease="${BASH_REMATCH[4]}"
            else
              echo "❌ Cannot parse version: $version"
              exit 1
            fi
            
            case "$type" in
              "patch")
                ((patch++))
                prerelease=""
                ;;
              "minor")
                ((minor++))
                patch=0
                prerelease=""
                ;;
              "major")
                ((major++))
                minor=0
                patch=0
                prerelease=""
                ;;
              "prerelease")
                if [[ -z "$prerelease" ]]; then
                  prerelease="-rc.1"
                else
                  # Increment prerelease number
                  if [[ "$prerelease" =~ ^-(.+)\.([0-9]+)$ ]]; then
                    local pre_type="${BASH_REMATCH[1]}"
                    local pre_num="${BASH_REMATCH[2]}"
                    ((pre_num++))
                    prerelease="-${pre_type}.${pre_num}"
                  else
                    prerelease="${prerelease}.1"
                  fi
                fi
                ;;
              *)
                echo "❌ Unknown version type: $type"
                exit 1
                ;;
            esac
            
            echo "${major}.${minor}.${patch}${prerelease}"
          }
          
          # Get current version
          CURRENT_VERSION=""
          if [[ -f "VERSION" ]]; then
            CURRENT_VERSION=$(cat VERSION | tr -d '\n' | sed 's/^v//')
            echo "📁 Found VERSION file: $CURRENT_VERSION"
          else
            # Try to get latest tag
            LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null | sed 's/^v//' || echo "0.0.0")
            CURRENT_VERSION="$LATEST_TAG"
            echo "🏷️ Using latest tag: $CURRENT_VERSION"
          fi
          
          # Determine new version and tag creation
          SHOULD_CREATE_TAG="false"
          
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # Manual trigger - calculate version based on input
            RELEASE_TYPE="${{ github.event.inputs.release_type }}"
            CUSTOM_VERSION="${{ github.event.inputs.custom_version }}"
            SHOULD_CREATE_TAG="${{ github.event.inputs.create_tag }}"
            
            if [[ "$RELEASE_TYPE" == "custom" ]]; then
              if [[ -z "$CUSTOM_VERSION" ]]; then
                echo "❌ Custom version required when release_type=custom"
                exit 1
              fi
              NEW_VERSION="$CUSTOM_VERSION"
              validate_version "$NEW_VERSION"
            else
              NEW_VERSION=$(increment_version "$CURRENT_VERSION" "$RELEASE_TYPE")
            fi
          else
            # Automatic trigger from tag push
            NEW_VERSION="${GITHUB_REF#refs/tags/v}"
            SHOULD_CREATE_TAG="false"  # Tag already exists
          fi
          
          # Remove v prefix if present
          NEW_VERSION="${NEW_VERSION#v}"
          
          # Determine if prerelease
          IS_PRERELEASE="false"
          if [[ "$NEW_VERSION" =~ (alpha|beta|rc|dev) ]]; then
            IS_PRERELEASE="true"
          fi
          
          # Set outputs
          echo "current_version=${CURRENT_VERSION}" >> $GITHUB_OUTPUT
          echo "new_version=${NEW_VERSION}" >> $GITHUB_OUTPUT
          echo "is_prerelease=${IS_PRERELEASE}" >> $GITHUB_OUTPUT
          echo "should_create_tag=${SHOULD_CREATE_TAG}" >> $GITHUB_OUTPUT
          
          # Summary
          echo "📊 Version Calculation Results:"
          echo "   Current: ${CURRENT_VERSION}"
          echo "   New: ${NEW_VERSION}"
          echo "   Prerelease: ${IS_PRERELEASE}"
          echo "   Create Tag: ${SHOULD_CREATE_TAG}"
      
      - name: 📝 Generate changelog
        id: changelog
        if: github.event.inputs.generate_changelog != 'false'
        run: |
          set -e
          
          NEW_VERSION="${{ steps.version.outputs.new_version }}"
          CURRENT_VERSION="${{ steps.version.outputs.current_version }}"
          IMAGE_NAME="${{ env.IMAGE_NAME }}"
          
          echo "📝 Generating changelog for version $NEW_VERSION..."
          
          # Get previous tag for commit range
          PREVIOUS_TAG=""
          if [[ "$CURRENT_VERSION" != "0.0.0" ]]; then
            PREVIOUS_TAG="v${CURRENT_VERSION}"
          fi
          
          # Get commit list
          COMMITS=""
          if [[ -n "$PREVIOUS_TAG" ]] && git rev-parse "$PREVIOUS_TAG" >/dev/null 2>&1; then
            COMMITS=$(git log "${PREVIOUS_TAG}..HEAD" --pretty=format:"- %s (%h)" --no-merges)
          else
            # If no previous tag, get recent commits
            COMMITS=$(git log --pretty=format:"- %s (%h)" --no-merges --max-count=10)
          fi
          
          # Create changelog
          CHANGELOG=$(cat << EOF
          ## 🚀 Release ${NEW_VERSION}
          
          **Release Date:** $(date +%Y-%m-%d)
          
          ### 🔄 Changes
          ${COMMITS}
          
          ### 🐳 Docker Images
          \`\`\`bash
          # GitHub Container Registry (recommended)
          docker pull ghcr.io/${IMAGE_NAME}:${NEW_VERSION}
          
          # Docker Hub (if enabled)
          docker pull ${IMAGE_NAME}:${NEW_VERSION}
          \`\`\`
          
          ### 📦 Quick Start
          \`\`\`bash
          # Using docker-compose
          export AMNEZIAWG_IMAGE=ghcr.io/${IMAGE_NAME}:${NEW_VERSION}
          docker-compose up -d
          
          # Using docker run
          docker run -d --name amneziawg-server \\
            --cap-add=NET_ADMIN \\
            --cap-add=SYS_MODULE \\
            -p 51820:51820/udp \\
            ghcr.io/${IMAGE_NAME}:${NEW_VERSION}
          \`\`\`
          EOF
          )
          
          # Save changelog (escape for GitHub Actions)
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "✅ Changelog generated successfully"

  # ============================================================================
  # METADATA PREPARATION
  # ============================================================================
  metadata:
    name: 📋 Prepare Metadata
    runs-on: ubuntu-latest
    needs: version-calculate
    outputs:
      version: ${{ steps.meta.outputs.version }}
      tags: ${{ steps.meta.outputs.tags }}
      labels: ${{ steps.meta.outputs.labels }}
      is_prerelease: ${{ needs.version-calculate.outputs.is_prerelease }}
      build_date: ${{ steps.meta.outputs.build_date }}
      vcs_ref: ${{ steps.meta.outputs.vcs_ref }}
    
    steps:
      - name: 📊 Extract metadata
        id: meta
        run: |
          # Version from previous job
          VERSION="v${{ needs.version-calculate.outputs.new_version }}"
          IS_PRERELEASE="${{ needs.version-calculate.outputs.is_prerelease }}"
          
          # Build metadata
          BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          VCS_REF=${GITHUB_SHA::8}
          
          # Docker tags
          DOCKERHUB_REGISTRY="${{ env.REGISTRY_DOCKERHUB }}"
          GHCR_REGISTRY="${{ env.REGISTRY_GHCR }}"
          IMAGE_NAME="${{ env.IMAGE_NAME }}"
          
          DOCKER_TAGS=""
          
          # Add Docker Hub tags only if enabled (disabled by default)
          if [[ "${{ vars.DOCKERHUB_ENABLED }}" == "true" ]]; then
            DOCKER_TAGS="$DOCKER_TAGS,${DOCKERHUB_REGISTRY}/${IMAGE_NAME}:${VERSION#v}"
            if [[ "$IS_PRERELEASE" == "false" ]]; then
              DOCKER_TAGS="$DOCKER_TAGS,${DOCKERHUB_REGISTRY}/${IMAGE_NAME}:latest"
            fi
          fi
          
          # Add GHCR tags (enabled by default)
          if [[ "${{ vars.GHCR_ENABLED }}" != "false" ]]; then
            DOCKER_TAGS="$DOCKER_TAGS,${GHCR_REGISTRY}/${IMAGE_NAME}:${VERSION#v}"
            if [[ "$IS_PRERELEASE" == "false" ]]; then
              DOCKER_TAGS="$DOCKER_TAGS,${GHCR_REGISTRY}/${IMAGE_NAME}:latest"
            fi
          fi
          
          # Remove leading comma
          DOCKER_TAGS=${DOCKER_TAGS#,}
          
          # Docker labels
          GITHUB_REPO="${{ github.repository }}"
          GITHUB_OWNER="${{ github.repository_owner }}"
          
          DOCKER_LABELS=""
          DOCKER_LABELS="$DOCKER_LABELS,org.opencontainers.image.title=AmneziaWG Docker Server"
          DOCKER_LABELS="$DOCKER_LABELS,org.opencontainers.image.description=Ready-to-use AmneziaWG VPN server in Docker with DPI bypass capabilities"
          DOCKER_LABELS="$DOCKER_LABELS,org.opencontainers.image.url=https://github.com/${GITHUB_REPO}"
          DOCKER_LABELS="$DOCKER_LABELS,org.opencontainers.image.source=https://github.com/${GITHUB_REPO}"
          DOCKER_LABELS="$DOCKER_LABELS,org.opencontainers.image.version=${VERSION#v}"
          DOCKER_LABELS="$DOCKER_LABELS,org.opencontainers.image.created=${BUILD_DATE}"
          DOCKER_LABELS="$DOCKER_LABELS,org.opencontainers.image.revision=${GITHUB_SHA}"
          DOCKER_LABELS="$DOCKER_LABELS,org.opencontainers.image.licenses=MIT"
          DOCKER_LABELS="$DOCKER_LABELS,maintainer=${GITHUB_OWNER}"
          
          # Remove leading comma
          DOCKER_LABELS=${DOCKER_LABELS#,}
          
          # Set outputs
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "tags=${DOCKER_TAGS}" >> $GITHUB_OUTPUT
          echo "labels=${DOCKER_LABELS}" >> $GITHUB_OUTPUT
          echo "build_date=${BUILD_DATE}" >> $GITHUB_OUTPUT
          echo "vcs_ref=${VCS_REF}" >> $GITHUB_OUTPUT
          
          # Debug output
          echo "🏷️ Version: ${VERSION}"
          echo "🏗️ Build Date: ${BUILD_DATE}"
          echo "🔗 VCS Ref: ${VCS_REF}"
          echo "🚀 Prerelease: ${IS_PRERELEASE}"
          echo "🐳 Docker Tags: ${DOCKER_TAGS}"

  # ============================================================================
  # BUILD TESTING (Optional but recommended)
  # ============================================================================
  test-build:
    name: 🧪 Test Build
    runs-on: ubuntu-latest
    needs: [version-calculate, metadata]
    if: github.event.inputs.skip_tests != 'true'
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: 🏗️ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: 🧪 Test Docker build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: false
          tags: amneziawg-test:${{ needs.version-calculate.outputs.new_version }}
          build-args: |
            BUILD_DATE=${{ needs.metadata.outputs.build_date }}
            VCS_REF=${{ needs.metadata.outputs.vcs_ref }}
            VERSION=${{ needs.metadata.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: ✅ Test report
        run: |
          echo "✅ Build test completed successfully!"
          echo "🔧 Version: ${{ needs.version-calculate.outputs.new_version }}"
          echo "🏗️ Platform: linux/amd64"

  # ============================================================================
  # VERSION FILE UPDATE AND TAG CREATION
  # ============================================================================
  create-version-tag:
    name: 🏷️ Create Version & Tag
    runs-on: ubuntu-latest
    needs: [version-calculate, test-build]
    if: needs.version-calculate.outputs.should_create_tag == 'true'
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 📝 Update VERSION file
        run: |
          NEW_VERSION="${{ needs.version-calculate.outputs.new_version }}"
          echo "📝 Updating VERSION file to: $NEW_VERSION"
          echo "$NEW_VERSION" > VERSION
          
          # Configure Git
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          # Check if there are changes to commit
          if ! git diff-index --quiet HEAD --; then
            git add VERSION
            git commit -m "🔖 Version $NEW_VERSION"
            echo "✅ VERSION file updated and committed"
          else
            echo "ℹ️ No changes to commit"
          fi
      
      - name: 🏷️ Create and push tag
        run: |
          NEW_VERSION="${{ needs.version-calculate.outputs.new_version }}"
          TAG="v$NEW_VERSION"
          
          echo "🏷️ Creating tag: $TAG"
          
          # Create tag
          git tag -a "$TAG" -m "🚀 Release $NEW_VERSION"
          
          # Push changes and tag
          git push origin HEAD
          git push origin "$TAG"
          
          echo "✅ Tag $TAG created and pushed"

  # ============================================================================
  # DOCKER BUILD AND PUBLISH
  # ============================================================================
  docker-build:
    name: 🐳 Build Docker Images
    runs-on: ubuntu-latest
    needs: [version-calculate, metadata, test-build]
    if: always() && (needs.test-build.result == 'success' || needs.test-build.result == 'skipped')
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: 🏗️ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: ${{ env.BUILD_PLATFORMS }}
      
      - name: 🔑 Login to Docker Hub
        if: vars.DOCKERHUB_ENABLED == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_DOCKERHUB }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: 🔑 Login to GitHub Container Registry
        if: vars.GHCR_ENABLED != 'false'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_GHCR }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 🏗️ Build and push images
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: ${{ env.BUILD_PLATFORMS }}
          push: true
          tags: ${{ needs.metadata.outputs.tags }}
          labels: ${{ needs.metadata.outputs.labels }}
          build-args: |
            BUILD_DATE=${{ needs.metadata.outputs.build_date }}
            VCS_REF=${{ needs.metadata.outputs.vcs_ref }}
            VERSION=${{ needs.metadata.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: 📊 Build report
        run: |
          echo "✅ Docker images built and published successfully!"
          echo "🏷️ Tags: ${{ needs.metadata.outputs.tags }}"
          echo "🏗️ Platforms: ${{ env.BUILD_PLATFORMS }}"

  # ============================================================================
  # GITHUB RELEASE CREATION
  # ============================================================================
  github-release:
    name: 📦 Create GitHub Release
    runs-on: ubuntu-latest
    needs: [version-calculate, metadata, docker-build]
    if: vars.CREATE_GITHUB_RELEASE != 'false'
    
    steps:
      - name: 📦 Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.metadata.outputs.version }}
          name: 🚀 AmneziaWG Docker Server ${{ needs.metadata.outputs.version }}
          body: ${{ needs.version-calculate.outputs.changelog }}
          prerelease: ${{ needs.version-calculate.outputs.is_prerelease == 'true' }}
          generate_release_notes: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ============================================================================
  # NOTIFICATIONS AND STATUS
  # ============================================================================
  notify:
    name: 📢 Notifications
    runs-on: ubuntu-latest
    needs: [version-calculate, metadata, test-build, create-version-tag, docker-build, github-release]
    if: always()
    
    steps:
      - name: 📊 Release report
        if: needs.docker-build.result == 'success'
        run: |
          DOCKERHUB_REGISTRY="${{ env.REGISTRY_DOCKERHUB }}"
          GHCR_REGISTRY="${{ env.REGISTRY_GHCR }}"
          IMAGE_NAME="${{ env.IMAGE_NAME }}"
          VERSION="${{ needs.metadata.outputs.version }}"
          NEW_VERSION="${{ needs.version-calculate.outputs.new_version }}"
          CURRENT_VERSION="${{ needs.version-calculate.outputs.current_version }}"
          IS_PRERELEASE="${{ needs.version-calculate.outputs.is_prerelease }}"
          RELEASE_TYPE="${{ github.event.inputs.release_type || 'tag-based' }}"
          
          # Job results
          VERSION_CALC_RESULT="${{ needs.version-calculate.result }}"
          TEST_BUILD_RESULT="${{ needs.test-build.result }}"
          TAG_CREATE_RESULT="${{ needs.create-version-tag.result }}"
          DOCKER_BUILD_RESULT="${{ needs.docker-build.result }}"
          GITHUB_RELEASE_RESULT="${{ needs.github-release.result }}"
          
          echo "🎉 RELEASE COMPLETED SUCCESSFULLY!"
          echo "╔══════════════════════════════════════════════════════════════╗"
          echo "║                     RELEASE SUMMARY                         ║"
          echo "╚══════════════════════════════════════════════════════════════╝"
          echo ""
          echo "📊 Version Information:"
          echo "   Previous: ${CURRENT_VERSION}"
          echo "   New: ${NEW_VERSION}"
          echo "   Type: ${RELEASE_TYPE}"
          echo "   Prerelease: ${IS_PRERELEASE}"
          echo ""
          echo "🔄 Pipeline Results:"
          echo "   ✓ Version Calculation: ${VERSION_CALC_RESULT}"
          echo "   ✓ Build Testing: ${TEST_BUILD_RESULT}"
          echo "   ✓ Tag Creation: ${TAG_CREATE_RESULT}"
          echo "   ✓ Docker Build: ${DOCKER_BUILD_RESULT}"
          echo "   ✓ GitHub Release: ${GITHUB_RELEASE_RESULT}"
          echo ""
          echo "🐳 Available Docker Images:"
          if [[ "${{ vars.GHCR_ENABLED }}" != "false" ]]; then
            echo "   • ${GHCR_REGISTRY}/${IMAGE_NAME}:${NEW_VERSION}"
            if [[ "${IS_PRERELEASE}" == "false" ]]; then
              echo "   • ${GHCR_REGISTRY}/${IMAGE_NAME}:latest"
            fi
          fi
          if [[ "${{ vars.DOCKERHUB_ENABLED }}" == "true" ]]; then
            echo "   • ${DOCKERHUB_REGISTRY}/${IMAGE_NAME}:${NEW_VERSION}"
            if [[ "${IS_PRERELEASE}" == "false" ]]; then
              echo "   • ${DOCKERHUB_REGISTRY}/${IMAGE_NAME}:latest"
            fi
          fi
          echo ""
          echo "🚀 Quick Start Commands:"
          echo "   docker pull ghcr.io/${IMAGE_NAME}:${NEW_VERSION}"
          echo "   docker run -d --name amneziawg-server ghcr.io/${IMAGE_NAME}:${NEW_VERSION}"
          echo ""
          echo "🔗 Links:"
          echo "   Release: https://github.com/${{ github.repository }}/releases/tag/v${NEW_VERSION}"
          echo "   Images: https://github.com/${{ github.repository }}/pkgs/container/amneziawg-docker"
          echo "╚══════════════════════════════════════════════════════════════╝"
      
      - name: ⚠️ Partial success report
        if: failure() || needs.docker-build.result != 'success'
        run: |
          NEW_VERSION="${{ needs.version-calculate.outputs.new_version }}"
          
          # Job results
          VERSION_CALC_RESULT="${{ needs.version-calculate.result }}"
          TEST_BUILD_RESULT="${{ needs.test-build.result }}"
          TAG_CREATE_RESULT="${{ needs.create-version-tag.result }}"
          DOCKER_BUILD_RESULT="${{ needs.docker-build.result }}"
          GITHUB_RELEASE_RESULT="${{ needs.github-release.result }}"
          
          echo "⚠️ RELEASE COMPLETED WITH ISSUES!"
          echo "╔══════════════════════════════════════════════════════════════╗"
          echo "║                    RELEASE STATUS                           ║"
          echo "╚══════════════════════════════════════════════════════════════╝"
          echo ""
          echo "🔧 Version: ${NEW_VERSION}"
          echo ""
          echo "📊 Pipeline Status:"
          echo "   Version Calculation: ${VERSION_CALC_RESULT}"
          echo "   Build Testing: ${TEST_BUILD_RESULT}"
          echo "   Tag Creation: ${TAG_CREATE_RESULT}"
          echo "   Docker Build: ${DOCKER_BUILD_RESULT}"
          echo "   GitHub Release: ${GITHUB_RELEASE_RESULT}"
          echo ""
          echo "🔍 Check the workflow logs for detailed error information"
          echo "💡 You may need to manually retry failed steps"
          echo "╚══════════════════════════════════════════════════════════════╝"